version: '3'

services:
  nginx-proxy:
    image: nginx:alpine
    container_name: confirmd-platform-nginx-proxy
    restart: always
    depends_on:
      - api-gateway
    ports:
      - '5000:5000'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ['CMD', 'nginx', '-t']
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:13
    container_name: confirmd-platform-postgres-1
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: credebl
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  nats:
    container_name: nats
    entrypoint: '/nats-server -c /config/nats-server.conf -DV' # Updated path to nats-server.conf
    image: nats
    ports:
      - '4222:4222'
      - '6222:6222'
      - '8222:8222'
    volumes:
      - ./config/nats-server.conf:/config/nats-server.conf # Mount the config file
  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data

  minio:
    image: minio/minio
    container_name: confirmd-platform-minio
    restart: always
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=dev-access-key
      - MINIO_ROOT_PASSWORD=dev-secret-key
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 10s
      timeout: 5s
      retries: 3
  api-gateway:
    depends_on:
      - nats # Use depends_on instead of needs
      - redis
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.api-gateway.dev
    env_file:
      - ./.env
    volumes:
      - ./uploads:/app/uploads
      # Volume mappings for hot reloading
      - ./apps/api-gateway:/app/apps/api-gateway
      # Mount other apps that api-gateway imports from
      - ./apps/connection:/app/apps/connection
      - ./apps/issuance:/app/apps/issuance
      - ./apps/user:/app/apps/user
      - ./apps/organization:/app/apps/organization
      - ./apps/ledger:/app/apps/ledger
      - ./apps/webhook:/app/apps/webhook
      - ./libs:/app/libs
      - ./package.json:/app/package.json
      - ./nest-cli.json:/app/nest-cli.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.build.json:/app/tsconfig.build.json
      # Exclude node_modules and dist folders from sync
      - /app/node_modules
      - /app/dist
  user:
    depends_on:
      - nats # Use depends_on instead of needs
      - api-gateway
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.user.dev # Use development dockerfile
    env_file:
      - ./.env
    volumes:
      # LIVE SOURCE CODE MOUNTING - No pre-built artifacts
      - ./apps/user:/app/apps/user # Full user app source
      - ./libs:/app/libs # Full libs source
      - ./package.json:/app/package.json
      - ./nest-cli.json:/app/nest-cli.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.build.json:/app/tsconfig.build.json
      # Exclude only node_modules - let everything else be live
      - /app/node_modules
    command: ['sh', '-c', 'cd /app && npm run start:dev user'] # Live development mode
    environment:
      - NODE_ENV=development
      - LIVE_RELOAD=true
  utility:
    depends_on:
      - nats # Use depends_on instead of needs
      - api-gateway
      - minio
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.utility
    env_file:
      - ./.env
    environment:
      - AWS_S3_STOREOBJECT_ACCESS_KEY=dev-access-key
      - AWS_S3_STOREOBJECT_SECRET_KEY=dev-secret-key
      - AWS_S3_STOREOBJECT_REGION=us-east-1
      - AWS_S3_STOREOBJECT_BUCKET=confirmd-dev-bucket
      - AWS_ENDPOINT_URL=http://minio:9000
  connection:
    depends_on:
      - nats # Use depends_on instead of needs
      - api-gateway
      - utility
      - user
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.connection
    env_file:
      - ./.env
  issuance:
    depends_on:
      - nats # Use depends_on instead of needs
      - redis
      - api-gateway
      - user
      - connection
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.issuance
    env_file:
      - ./.env
  ledger:
    depends_on:
      - nats # Use depends_on instead of needs
      - api-gateway
      - user
      - connection
      - issuance
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.ledger
    env_file:
      - ./.env
  organization:
    depends_on:
      - nats # Use depends_on instead of needs
      - api-gateway
      - user
      - connection
      - issuance
      - ledger
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.organization
    env_file:
      - ./.env
    volumes:
      - ./uploads:/app/uploads
  verification:
    depends_on:
      - nats # Use depends_on instead of needs
      - api-gateway
      - user
      - connection
      - issuance
      - ledger
      - organization
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.verification
    env_file:
      - ./.env
  agent-provisioning:
    depends_on:
      - nats # Use depends_on instead of needs
      - postgres
      - api-gateway
      - user
      - connection
      - issuance
      - ledger
      - organization
      - verification
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.agent-provisioning
      args:
        - ROOT_PATH=/app/agent-provisioning/AFJ/agent-config
    env_file:
      - ./.env
    environment:
      - ROOT_PATH=/app/agent-provisioning/AFJ/agent-config
    volumes:
      - ./apps/agent-provisioning/AFJ/agent-config:/app/agent-provisioning/AFJ/agent-config
      - /var/run/docker.sock:/var/run/docker.sock
      - ./apps/agent-provisioning/AFJ/token:/app/agent-provisioning/AFJ/token
      - ./agent.env:/app/agent.env
  agent-service:
    depends_on:
      - nats # Use depends_on instead of needs
      - api-gateway
      - user
      - connection
      - issuance
      - ledger
      - organization
      - verification
      - agent-provisioning
    command: sh -c 'until (docker logs confirmd-platform-agent-provisioning-1 | grep "Agent-Provisioning-Service Microservice is listening to NATS"); do sleep 1; done && node dist/apps/agent-service/main.js'
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.agent-service
    env_file:
      - ./.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    volumes_from:
      - agent-provisioning
  cloud-wallet:
    depends_on:
      - nats
      - api-gateway
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.cloud-wallet
    env_file:
      - ./.env
  geolocation:
    depends_on:
      - nats
      - api-gateway
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.geolocation
    env_file:
      - ./.env
  notification:
    depends_on:
      - nats
      - api-gateway
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.notification
    env_file:
      - ./.env
  webhook:
    depends_on:
      - nats
      - api-gateway
    build:
      context: ./ # Adjust the context path as needed
      dockerfile: Dockerfiles/Dockerfile.webhook
    env_file:
      - ./.env

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: confirmd-platform-cloudflared
    restart: always
    depends_on:
      - minio
      # Added platform-admin dependency since it's running separately
      # Platform admin runs manually on port 8001
    volumes:
      - /Users/itopa/.cloudflared:/etc/cloudflared
    command: tunnel --no-autoupdate run --config /etc/cloudflared/config.yml confirmd-platform
    networks:
      - default

  # Platform admin now running correctly as: f856e3a4-b09c-4356-82de-b105594eec43_platform-admin
  # Container started manually with proper configuration
  # Accessible via: https://platform-admin.confamd.com (through Cloudflare tunnel)
  # Local port: 8002 (FIXED: was 8001, now matches system expectations)
  # Name: lowercase "platform-admin" (FIXED: was "Platform-admin", now matches DNS lookups)
  # Status: RUNNING âœ…

volumes:
  cache:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local
